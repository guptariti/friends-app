{"ast":null,"code":"import _slicedToArray from \"/Users/richavarshney/Documents/friends-app/server/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/richavarshney/Documents/friends-app/server/client/src/components/Chat/Chat.js\";\nimport React, { useState, useEffect } from \"react\";\nimport queryString from 'query-string';\nimport io from \"socket.io-client\";\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport './Chat.css';\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        room = _useState4[0],\n        setRoom = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        users = _useState6[0],\n        setUsers = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        message = _useState8[0],\n        setMessage = _useState8[1];\n\n  const _useState9 = useState([]),\n        _useState10 = _slicedToArray(_useState9, 2),\n        messages = _useState10[0],\n        setMessages = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        ready = _useState12[0],\n        setReadyStatus = _useState12[1];\n\n  const _useState13 = useState(''),\n        _useState14 = _slicedToArray(_useState13, 2),\n        question = _useState14[0],\n        setQuestion = _useState14[1];\n\n  const _useState15 = useState(''),\n        _useState16 = _slicedToArray(_useState15, 2),\n        questions = _useState16[0],\n        setQuestions = _useState16[1];\n\n  const ENDPOINT = 'http://localhost:5000';\n  useEffect(() => {\n    const _queryString$parse = queryString.parse(location.search),\n          name = _queryString$parse.name,\n          room = _queryString$parse.room;\n\n    socket = io(ENDPOINT);\n    setRoom(room);\n    setName(name);\n    socket.emit('join', {\n      name,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n      }\n    });\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages(messages => [...messages, message]);\n    });\n    socket.on(\"roomData\", ({\n      users\n    }) => {\n      setUsers(users);\n    });\n  }, []);\n  useEffect(() => {\n    let counter = 0;\n\n    for (let i = 0; i < users.length; i++) {\n      if (users[i].host) {\n        counter++;\n      }\n    }\n\n    if (counter == users.length && questions.length == users.length) {\n      setReadyStatus(true);\n    } else {\n      setReadyStatus(false);\n    }\n  });\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n\n    console.log(users);\n  };\n\n  const filterUsers = () => {\n    console.log(socket.id);\n    socket.emit('submitted', socket.id);\n    socket.on('roomData', ({\n      users\n    }) => {\n      setUsers(users);\n      console.log(users);\n    });\n    socket.emit('questions', {\n      question,\n      room\n    });\n    socket.on('getQuestions', quests => {\n      setQuestions(quests);\n    });\n    console.log(questions);\n  };\n\n  return ready ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Let's Start Boys\")) : React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: filterUsers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, \"Click Me!\"), React.createElement(\"input\", {\n    type: \"text\",\n    onChange: event => setQuestion(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(InfoBar, {\n    room: room,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), React.createElement(Messages, {\n    messages: messages,\n    name: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), React.createElement(Input, {\n    message: message,\n    setMessage: setMessage,\n    sendMessage: sendMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/richavarshney/Documents/friends-app/server/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","Messages","InfoBar","Input","socket","Chat","location","name","setName","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","ready","setReadyStatus","question","setQuestion","questions","setQuestions","ENDPOINT","parse","search","emit","error","alert","on","counter","i","length","host","sendMessage","event","preventDefault","console","log","filterUsers","id","quests","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport queryString from 'query-string';\nimport io from \"socket.io-client\";\n\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\n\nimport './Chat.css';\n\nlet socket;\n\nconst Chat = ({ location }) => {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [users, setUsers] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [ready, setReadyStatus] = useState(false);\n  const [question, setQuestion] = useState('');\n  const [questions, setQuestions] = useState('');\n  const ENDPOINT = 'http://localhost:5000';\n\n  useEffect(() => {\n    const { name, room } = queryString.parse(location.search);\n\n    socket = io(ENDPOINT);\n\n    setRoom(room);\n    setName(name)\n\n    socket.emit('join', { name, room }, (error) => {\n      if(error) {\n        alert(error);\n      }\n    });\n  }, [ENDPOINT, location.search]);\n  \n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages(messages => [ ...messages, message ]);\n    });\n    \n    socket.on(\"roomData\", ({ users }) => {\n      setUsers(users);\n    });\n\n\n}, []);\n\n  useEffect(() => {\n    let counter = 0;\n    for (let i = 0; i < users.length; i++) {\n      if (users[i].host) {\n        counter++;\n      }\n    }\n\n    if (counter == users.length && questions.length == users.length) {\n      setReadyStatus(true);\n    } else {\n      setReadyStatus(false);\n    }\n\n  })\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n\n    if(message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n\n    console.log(users);\n  }\n\n  const filterUsers = () => {\n    console.log(socket.id);\n    socket.emit('submitted', socket.id);\n\n    socket.on('roomData', ({users}) => {\n      setUsers(users);\n      console.log(users);\n    });\n\n    socket.emit('questions', {question, room});\n\n    socket.on('getQuestions', (quests) => {\n      setQuestions(quests);\n    });\n    console.log(questions);\n  }\n\n  return (\n    ready? (\n      <div>\n        <p>Let's Start Boys</p>\n      </div>\n\n    )\n    :\n    (\n    <div className=\"outerContainer\">\n      <div>\n        <button onClick={filterUsers}>Click Me!</button>\n        <input type=\"text\" onChange={(event) => setQuestion(event.target.value)}></input>\n      </div>\n      <div className=\"container\">\n          <InfoBar room={room} />\n          <Messages messages={messages} name={name} />\n          <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n      </div>\n    </div>\n    )\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}